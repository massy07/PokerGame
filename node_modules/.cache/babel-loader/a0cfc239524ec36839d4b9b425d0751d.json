{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { deck } from \"../entities/deck\";\nconst decks = [];\nconst decksStoreSlice = createSlice({\n  name: 'decks',\n  initialState: decks,\n  reducers: {\n    setViewState: state => {\n      console.log(state);\n    },\n    setNewDecks: state => {\n      state = [];\n\n      for (let i = 0; i < 6; i++) {\n        state.push(...deck);\n        console.log('entrato');\n      }\n\n      console.log('entrato');\n    },\n    setNumberDecks: (state, action) => {\n      state = [];\n\n      for (let i = 0; i < action.payload; i++) {\n        state.push(...deck);\n      }\n    } // decrement:(state) => { state.count -= 1  },\n    // incrementByPayload : (state, action:PayloadAction<number> ) => { state.count += action.payload  }, \n\n  }\n});\nexport const getRandomInt = max => {\n  return Math.floor(Math.random() * max);\n};\nexport const {\n  setViewState,\n  setNewDecks\n} = decksStoreSlice.actions;\nexport default decksStoreSlice.reducer;","map":{"version":3,"names":["createSlice","deck","decks","decksStoreSlice","name","initialState","reducers","setViewState","state","console","log","setNewDecks","i","push","setNumberDecks","action","payload","getRandomInt","max","Math","floor","random","actions","reducer"],"sources":["/Users/m.europa/Desktop/img_css/PokerGame/src/store/reducer/decksStore.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { deck, cardState } from \"../entities/deck\";\n\n\n\nconst decks:Array<cardState>=[]\n\nconst decksStoreSlice = createSlice({\n  name:'decks',\n  initialState: decks,\n  reducers:{\n    setViewState:(state) => { console.log(state)  },\n    setNewDecks:(state) =>{\n      state=[]\n      for( let i:number=0; i<6; i++){\n        state.push( ...deck )\n        console.log('entrato')\n      }\n      console.log('entrato')\n    },\n    setNumberDecks:(state, action:PayloadAction<number> ) => {\n      state=[]\n      for( let i:number=0; i<action.payload; i++){\n        state.push( ...deck )\n      }\n    },\n    // decrement:(state) => { state.count -= 1  },\n    // incrementByPayload : (state, action:PayloadAction<number> ) => { state.count += action.payload  }, \n  }\n})\n\nexport const getRandomInt = (max:number) => {\n  return Math.floor(Math.random() * max);\n}\n\n\n\n\n\nexport const { setViewState, setNewDecks } = decksStoreSlice.actions \n\nexport default decksStoreSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,IAAT,QAAgC,kBAAhC;AAIA,MAAMC,KAAsB,GAAC,EAA7B;AAEA,MAAMC,eAAe,GAAGH,WAAW,CAAC;EAClCI,IAAI,EAAC,OAD6B;EAElCC,YAAY,EAAEH,KAFoB;EAGlCI,QAAQ,EAAC;IACPC,YAAY,EAAEC,KAAD,IAAW;MAAEC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IAAqB,CADxC;IAEPG,WAAW,EAAEH,KAAD,IAAU;MACpBA,KAAK,GAAC,EAAN;;MACA,KAAK,IAAII,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAAC,CAAvB,EAA0BA,CAAC,EAA3B,EAA8B;QAC5BJ,KAAK,CAACK,IAAN,CAAY,GAAGZ,IAAf;QACAQ,OAAO,CAACC,GAAR,CAAY,SAAZ;MACD;;MACDD,OAAO,CAACC,GAAR,CAAY,SAAZ;IACD,CATM;IAUPI,cAAc,EAAC,CAACN,KAAD,EAAQO,MAAR,KAA0C;MACvDP,KAAK,GAAC,EAAN;;MACA,KAAK,IAAII,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAACG,MAAM,CAACC,OAA9B,EAAuCJ,CAAC,EAAxC,EAA2C;QACzCJ,KAAK,CAACK,IAAN,CAAY,GAAGZ,IAAf;MACD;IACF,CAfM,CAgBP;IACA;;EAjBO;AAHyB,CAAD,CAAnC;AAwBA,OAAO,MAAMgB,YAAY,GAAIC,GAAD,IAAgB;EAC1C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAP;AACD,CAFM;AAQP,OAAO,MAAM;EAAEX,YAAF;EAAgBI;AAAhB,IAAgCR,eAAe,CAACmB,OAAtD;AAEP,eAAenB,eAAe,CAACoB,OAA/B"},"metadata":{},"sourceType":"module"}