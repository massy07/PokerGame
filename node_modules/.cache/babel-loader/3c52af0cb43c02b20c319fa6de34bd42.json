{"ast":null,"code":"import React from 'react';\nimport { createPortal } from 'react-dom'; // creates a div that will be appended to the HTML body \n\nconst createElementHTML = id => {\n  document.createElement('div');\n  const element = document.createElement('div');\n  element.id = id;\n  element.className = id;\n  document.body.appendChild(element);\n  return element;\n};\n/**\r\n *  This component create a React Portal\r\n * Each time the component mount, check if the div used to show the modal already exists\r\n * if it is so, this div will be reused otherwise another div will be created\r\n * Each time the component unmount, remove the modal div from the DOM\r\n */\n\n\nconst Portal = _ref => {\n  let {\n    id,\n    children\n  } = _ref;\n  const portalContainer = document.getElementById(id) || createElementHTML(id);\n  return /*#__PURE__*/createPortal(children, portalContainer);\n};\n\n_c = Portal;\nexport default _c2 = /*#__PURE__*/React.memo(Portal);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Portal\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","createPortal","createElementHTML","id","document","createElement","element","className","body","appendChild","Portal","children","portalContainer","getElementById","memo"],"sources":["D:/PokerGame/src/library/Portal/Portal.tsx"],"sourcesContent":["import React from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\n// creates a div that will be appended to the HTML body \r\nconst createElementHTML = (id:string) => {\r\n  document.createElement('div');\r\n  const element = document.createElement('div');\r\n  element.id = id;\r\n  element.className = id;\r\n  document.body.appendChild(element);\r\n  return element;\r\n};\r\n\r\n/**\r\n *  This component create a React Portal\r\n * Each time the component mount, check if the div used to show the modal already exists\r\n * if it is so, this div will be reused otherwise another div will be created\r\n * Each time the component unmount, remove the modal div from the DOM\r\n */\r\n\r\ninterface PortalState {\r\n  id:string; \r\n  children: React.ReactNode;\r\n}\r\nconst Portal:React.FC<PortalState> = ({ id, children }) => {\r\n  const portalContainer = document.getElementById(id) || createElementHTML(id);\r\n  return createPortal(children, portalContainer);\r\n};\r\n\r\nexport default React.memo(Portal);\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,WAA7B,C,CAEA;;AACA,MAAMC,iBAAiB,GAAIC,EAAD,IAAe;EACvCC,QAAQ,CAACC,aAAT,CAAuB,KAAvB;EACA,MAAMC,OAAO,GAAGF,QAAQ,CAACC,aAAT,CAAuB,KAAvB,CAAhB;EACAC,OAAO,CAACH,EAAR,GAAaA,EAAb;EACAG,OAAO,CAACC,SAAR,GAAoBJ,EAApB;EACAC,QAAQ,CAACI,IAAT,CAAcC,WAAd,CAA0BH,OAA1B;EACA,OAAOA,OAAP;AACD,CAPD;AASA;AACA;AACA;AACA;AACA;AACA;;;AAMA,MAAMI,MAA4B,GAAG,QAAsB;EAAA,IAArB;IAAEP,EAAF;IAAMQ;EAAN,CAAqB;EACzD,MAAMC,eAAe,GAAGR,QAAQ,CAACS,cAAT,CAAwBV,EAAxB,KAA+BD,iBAAiB,CAACC,EAAD,CAAxE;EACA,oBAAOF,YAAY,CAACU,QAAD,EAAWC,eAAX,CAAnB;AACD,CAHD;;KAAMF,M;AAKN,kCAAeV,KAAK,CAACc,IAAN,CAAWJ,MAAX,CAAf"},"metadata":{},"sourceType":"module"}