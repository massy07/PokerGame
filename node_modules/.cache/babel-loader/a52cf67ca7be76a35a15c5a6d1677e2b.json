{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { deck } from \"../entities/deck\";\nexport const decks = [];\nconst decksStoreSlice = createSlice({\n  name: 'decks',\n  initialState: decks,\n  reducers: {\n    setViewState: state => {\n      console.log(state);\n    },\n    setNewDecks: state => {\n      state = [];\n\n      for (let i = 0; i < 6; i++) {\n        state.push(...deck);\n      }\n\n      console.log('cardDealer', decks);\n      return state;\n    },\n    setNumberDecks: (state, action) => {\n      state = [];\n\n      for (let i = 0; i < action.payload; i++) {\n        state.push(...deck);\n      }\n\n      return state;\n    },\n    deleteCard: (state, action) => {\n      let newDeck = [...state];\n      newDeck.splice(action.payload, 1);\n      return newDeck;\n    }\n  }\n});\nexport const getRandomInt = max => {\n  return Math.floor(Math.random() * max);\n};\nexport const {\n  setViewState,\n  setNewDecks,\n  deleteCard\n} = decksStoreSlice.actions;\nexport default decksStoreSlice.reducer;","map":{"version":3,"names":["createSlice","deck","decks","decksStoreSlice","name","initialState","reducers","setViewState","state","console","log","setNewDecks","i","push","setNumberDecks","action","payload","deleteCard","newDeck","splice","getRandomInt","max","Math","floor","random","actions","reducer"],"sources":["/Users/m.europa/Desktop/img_css/PokerGame/src/store/reducer/decksStore.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { deck, cardState } from \"../entities/deck\";\n\n\nexport const decks:Array<cardState>=[]\n\nconst decksStoreSlice = createSlice({\n  name:'decks',\n  initialState: decks,\n  reducers:{\n    setViewState:(state) => { console.log(state)  },\n    setNewDecks:(state) =>{\n      state=[]\n      for( let i:number=0; i<6; i++){\n        state.push( ...deck ) \n      } \n      console.log('cardDealer',decks)\n      return state;\n    },\n    setNumberDecks:(state, action:PayloadAction<number> ) => {\n      state=[]\n      for( let i:number=0; i<action.payload; i++){\n        state.push( ...deck )\n      }\n      return state;\n    }, \n    deleteCard:(state, action:PayloadAction<number> ) => {\n      let newDeck = [...state] \n      newDeck.splice( action.payload , 1 )\n      return newDeck\n     }, \n  }\n})\n\nexport const getRandomInt = (max:number) => {\n  return Math.floor(Math.random() * max);\n}\n\nexport const { setViewState, setNewDecks, deleteCard } = decksStoreSlice.actions \n\nexport default decksStoreSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,IAAT,QAAgC,kBAAhC;AAGA,OAAO,MAAMC,KAAsB,GAAC,EAA7B;AAEP,MAAMC,eAAe,GAAGH,WAAW,CAAC;EAClCI,IAAI,EAAC,OAD6B;EAElCC,YAAY,EAAEH,KAFoB;EAGlCI,QAAQ,EAAC;IACPC,YAAY,EAAEC,KAAD,IAAW;MAAEC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IAAqB,CADxC;IAEPG,WAAW,EAAEH,KAAD,IAAU;MACpBA,KAAK,GAAC,EAAN;;MACA,KAAK,IAAII,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAAC,CAAvB,EAA0BA,CAAC,EAA3B,EAA8B;QAC5BJ,KAAK,CAACK,IAAN,CAAY,GAAGZ,IAAf;MACD;;MACDQ,OAAO,CAACC,GAAR,CAAY,YAAZ,EAAyBR,KAAzB;MACA,OAAOM,KAAP;IACD,CATM;IAUPM,cAAc,EAAC,CAACN,KAAD,EAAQO,MAAR,KAA0C;MACvDP,KAAK,GAAC,EAAN;;MACA,KAAK,IAAII,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAACG,MAAM,CAACC,OAA9B,EAAuCJ,CAAC,EAAxC,EAA2C;QACzCJ,KAAK,CAACK,IAAN,CAAY,GAAGZ,IAAf;MACD;;MACD,OAAOO,KAAP;IACD,CAhBM;IAiBPS,UAAU,EAAC,CAACT,KAAD,EAAQO,MAAR,KAA0C;MACnD,IAAIG,OAAO,GAAG,CAAC,GAAGV,KAAJ,CAAd;MACAU,OAAO,CAACC,MAAR,CAAgBJ,MAAM,CAACC,OAAvB,EAAiC,CAAjC;MACA,OAAOE,OAAP;IACA;EArBK;AAHyB,CAAD,CAAnC;AA4BA,OAAO,MAAME,YAAY,GAAIC,GAAD,IAAgB;EAC1C,OAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,GAA3B,CAAP;AACD,CAFM;AAIP,OAAO,MAAM;EAAEd,YAAF;EAAgBI,WAAhB;EAA6BM;AAA7B,IAA4Cd,eAAe,CAACsB,OAAlE;AAEP,eAAetB,eAAe,CAACuB,OAA/B"},"metadata":{},"sourceType":"module"}