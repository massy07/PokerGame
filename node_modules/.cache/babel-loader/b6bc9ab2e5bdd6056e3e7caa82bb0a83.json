{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const handsPlayers = [];\nconst handsPlayersSlice = createSlice({\n  name: 'handCardsPlayers',\n  initialState: handsPlayers,\n  reducers: {\n    setPlayer: state => {\n      state = [{\n        turnOn: false,\n        dealer: false,\n        user: 'player_1',\n        cardHand: [],\n        valueHand: 0\n      }, {\n        turnOn: false,\n        dealer: true,\n        user: 'dealer',\n        cardHand: [],\n        valueHand: 0\n      }];\n      return state;\n    },\n    setPlayerTable: (state, action) => {\n      let newDeck = [...state];\n\n      for (let i = 0; i < action.payload; i++) {\n        state.push({\n          turnOn: i === 0,\n          dealer: false,\n          user: 'player_' + (i + 1),\n          cardHand: [],\n          valueHand: 0\n        });\n      }\n\n      state.push({\n        turnOn: false,\n        dealer: true,\n        user: 'dealer',\n        cardHand: [],\n        valueHand: 0\n      });\n      return state;\n    },\n    setPlayerHand: (state, action) => {\n      let addHandsCard = [...state];\n      let lookingPlayer = true;\n\n      if (addHandsCard.length > 0) {\n        for (let i = 0; i < addHandsCard.length; i++) {\n          if (addHandsCard[i].turnOn && lookingPlayer) {\n            addHandsCard[i].cardHand.push(action.payload);\n            lookingPlayer = false;\n\n            if (addHandsCard[i + 1]) {\n              addHandsCard[i].turnOn = false;\n              addHandsCard[i + 1].turnOn = true;\n            } else {\n              addHandsCard[0].turnOn = true;\n            }\n          }\n        }\n      }\n\n      state = addHandsCard;\n      return state;\n    }\n  }\n});\nexport const {\n  setPlayer,\n  setPlayerHand,\n  setPlayerTable\n} = handsPlayersSlice.actions;\nexport default handsPlayersSlice.reducer;","map":{"version":3,"names":["createSlice","handsPlayers","handsPlayersSlice","name","initialState","reducers","setPlayer","state","turnOn","dealer","user","cardHand","valueHand","setPlayerTable","action","newDeck","i","payload","push","setPlayerHand","addHandsCard","lookingPlayer","length","actions","reducer"],"sources":["/Users/m.europa/Desktop/img_css/PokerGame/src/store/reducer/handCardsPlayersStore.ts"],"sourcesContent":["import { createSlice, PayloadAction, current  } from '@reduxjs/toolkit'\nimport { createFalse } from 'typescript'\nimport { cardState } from '../entities/deck'\nimport { handCardsPlayerState } from '../entities/handCardsPlayers'\n \n\nexport const handsPlayers:Array<handCardsPlayerState>=[]\n\nconst handsPlayersSlice = createSlice({\n  name:'handCardsPlayers',\n  initialState: handsPlayers,\n  reducers:{\n    setPlayer:(state ) => {\n      state=[ \n        { turnOn: false, dealer: false, user: ( 'player_1') , cardHand:[] ,  valueHand: 0 } ,\n        { turnOn: false, dealer: true, user: 'dealer', cardHand:[], valueHand: 0}\n      ] \n      return state;\n    }, \n    setPlayerTable:(state, action:PayloadAction<number>) => {\n      let newDeck = [...state]  \n      for( let i:number=0; i<action.payload ; i++){\n        state.push( { turnOn:(i===0) , dealer: false, user: ( 'player_'+(i+1)) , cardHand:[] ,  valueHand: 0 } ) \n      } \n      state.push( { turnOn:false, dealer: true, user: 'dealer', cardHand:[], valueHand: 0})  \n      return state\n    }, \n    setPlayerHand:(state, action:PayloadAction<cardState> ) => {\n      let addHandsCard:Array<handCardsPlayerState> = [ ...state ] \n      let lookingPlayer:boolean=true \n      if( addHandsCard.length>0){\n        for( let i:number=0; i<addHandsCard.length ; i++){ \n          if( addHandsCard[i].turnOn && lookingPlayer ){\n            addHandsCard[i].cardHand.push( action.payload )   \n            lookingPlayer=false\n            if(addHandsCard[i+1]){\n              addHandsCard[i].turnOn=false\n              addHandsCard[i+1].turnOn=true\n            }else{\n              addHandsCard[0].turnOn=true\n            }\n          }\n          \n        }\n      } \n      state = addHandsCard\n      return state\n\n    }\n  }\n})\n \n\nexport const { setPlayer, setPlayerHand, setPlayerTable } = handsPlayersSlice.actions \n\nexport default handsPlayersSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAAqD,kBAArD;AAMA,OAAO,MAAMC,YAAwC,GAAC,EAA/C;AAEP,MAAMC,iBAAiB,GAAGF,WAAW,CAAC;EACpCG,IAAI,EAAC,kBAD+B;EAEpCC,YAAY,EAAEH,YAFsB;EAGpCI,QAAQ,EAAC;IACPC,SAAS,EAAEC,KAAD,IAAY;MACpBA,KAAK,GAAC,CACJ;QAAEC,MAAM,EAAE,KAAV;QAAiBC,MAAM,EAAE,KAAzB;QAAgCC,IAAI,EAAI,UAAxC;QAAsDC,QAAQ,EAAC,EAA/D;QAAqEC,SAAS,EAAE;MAAhF,CADI,EAEJ;QAAEJ,MAAM,EAAE,KAAV;QAAiBC,MAAM,EAAE,IAAzB;QAA+BC,IAAI,EAAE,QAArC;QAA+CC,QAAQ,EAAC,EAAxD;QAA4DC,SAAS,EAAE;MAAvE,CAFI,CAAN;MAIA,OAAOL,KAAP;IACD,CAPM;IAQPM,cAAc,EAAC,CAACN,KAAD,EAAQO,MAAR,KAAyC;MACtD,IAAIC,OAAO,GAAG,CAAC,GAAGR,KAAJ,CAAd;;MACA,KAAK,IAAIS,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAACF,MAAM,CAACG,OAA9B,EAAwCD,CAAC,EAAzC,EAA4C;QAC1CT,KAAK,CAACW,IAAN,CAAY;UAAEV,MAAM,EAAEQ,CAAC,KAAG,CAAd;UAAmBP,MAAM,EAAE,KAA3B;UAAkCC,IAAI,EAAI,aAAWM,CAAC,GAAC,CAAb,CAA1C;UAA6DL,QAAQ,EAAC,EAAtE;UAA4EC,SAAS,EAAE;QAAvF,CAAZ;MACD;;MACDL,KAAK,CAACW,IAAN,CAAY;QAAEV,MAAM,EAAC,KAAT;QAAgBC,MAAM,EAAE,IAAxB;QAA8BC,IAAI,EAAE,QAApC;QAA8CC,QAAQ,EAAC,EAAvD;QAA2DC,SAAS,EAAE;MAAtE,CAAZ;MACA,OAAOL,KAAP;IACD,CAfM;IAgBPY,aAAa,EAAC,CAACZ,KAAD,EAAQO,MAAR,KAA6C;MACzD,IAAIM,YAAwC,GAAG,CAAE,GAAGb,KAAL,CAA/C;MACA,IAAIc,aAAqB,GAAC,IAA1B;;MACA,IAAID,YAAY,CAACE,MAAb,GAAoB,CAAxB,EAA0B;QACxB,KAAK,IAAIN,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAACI,YAAY,CAACE,MAApC,EAA6CN,CAAC,EAA9C,EAAiD;UAC/C,IAAII,YAAY,CAACJ,CAAD,CAAZ,CAAgBR,MAAhB,IAA0Ba,aAA9B,EAA6C;YAC3CD,YAAY,CAACJ,CAAD,CAAZ,CAAgBL,QAAhB,CAAyBO,IAAzB,CAA+BJ,MAAM,CAACG,OAAtC;YACAI,aAAa,GAAC,KAAd;;YACA,IAAGD,YAAY,CAACJ,CAAC,GAAC,CAAH,CAAf,EAAqB;cACnBI,YAAY,CAACJ,CAAD,CAAZ,CAAgBR,MAAhB,GAAuB,KAAvB;cACAY,YAAY,CAACJ,CAAC,GAAC,CAAH,CAAZ,CAAkBR,MAAlB,GAAyB,IAAzB;YACD,CAHD,MAGK;cACHY,YAAY,CAAC,CAAD,CAAZ,CAAgBZ,MAAhB,GAAuB,IAAvB;YACD;UACF;QAEF;MACF;;MACDD,KAAK,GAAGa,YAAR;MACA,OAAOb,KAAP;IAED;EArCM;AAH2B,CAAD,CAArC;AA6CA,OAAO,MAAM;EAAED,SAAF;EAAaa,aAAb;EAA4BN;AAA5B,IAA+CX,iBAAiB,CAACqB,OAAvE;AAEP,eAAerB,iBAAiB,CAACsB,OAAjC"},"metadata":{},"sourceType":"module"}