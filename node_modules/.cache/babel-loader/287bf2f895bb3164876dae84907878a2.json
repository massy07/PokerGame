{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { deck } from \"../entities/deck\";\nexport const decks = [];\nconst decksStoreSlice = createSlice({\n  name: 'decks',\n  initialState: decks,\n  reducers: {\n    setViewState: state => {\n      console.log(state);\n    },\n    setNewDecks: state => {\n      state = [];\n\n      for (let i = 0; i < 6; i++) {\n        state.push(...deck);\n      }\n\n      return state;\n    },\n    setNumberDecks: (state, action) => {\n      let newDeck = [];\n\n      for (let i = 0; i < action.payload; i++) {\n        newDeck.push(...deck);\n      }\n\n      return newDeck;\n    },\n    deleteCard: (state, action) => {\n      let newDeck = [...state];\n      newDeck.splice(action.payload, 1);\n      return newDeck;\n    },\n    setResetCard: state => {\n      let newDeck = [];\n      state = newDeck;\n      return state;\n    }\n  }\n});\nexport const {\n  setViewState,\n  setNewDecks,\n  deleteCard,\n  setResetCard\n} = decksStoreSlice.actions;\nexport default decksStoreSlice.reducer;","map":{"version":3,"names":["createSlice","deck","decks","decksStoreSlice","name","initialState","reducers","setViewState","state","console","log","setNewDecks","i","push","setNumberDecks","action","newDeck","payload","deleteCard","splice","setResetCard","actions","reducer"],"sources":["/Users/m.europa/Desktop/img_css/PokerGame/src/store/reducer/decksStore.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\nimport { deck, cardState } from \"../entities/deck\";\n\n\nexport const decks:Array<cardState>=[]\n\nconst decksStoreSlice = createSlice({\n  name:'decks',\n  initialState: decks,\n  reducers:{\n    setViewState:(state) => { console.log(state)  },\n    setNewDecks:(state) =>{\n      state=[]\n      for( let i:number=0; i<6; i++){\n        state.push( ...deck ) \n      }  \n      return state;\n    },\n    setNumberDecks:(state, action:PayloadAction<number> ) => {\n      let newDeck:Array<cardState>=[]\n      for( let i:number=0; i<action.payload; i++){\n        newDeck.push( ...deck )\n      }\n      return newDeck;\n    }, \n    deleteCard:(state, action:PayloadAction<number> ) => {\n      let newDeck = [...state]  \n      newDeck.splice( action.payload , 1 ) \n      return newDeck\n     },\n    setResetCard:( state ) => {\n      let newDeck:Array<cardState>=[]\n      state = newDeck\n      return state;\n    }\n  }\n})\n\n\nexport const { setViewState, setNewDecks, deleteCard, setResetCard } = decksStoreSlice.actions \n\nexport default decksStoreSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AACA,SAASC,IAAT,QAAgC,kBAAhC;AAGA,OAAO,MAAMC,KAAsB,GAAC,EAA7B;AAEP,MAAMC,eAAe,GAAGH,WAAW,CAAC;EAClCI,IAAI,EAAC,OAD6B;EAElCC,YAAY,EAAEH,KAFoB;EAGlCI,QAAQ,EAAC;IACPC,YAAY,EAAEC,KAAD,IAAW;MAAEC,OAAO,CAACC,GAAR,CAAYF,KAAZ;IAAqB,CADxC;IAEPG,WAAW,EAAEH,KAAD,IAAU;MACpBA,KAAK,GAAC,EAAN;;MACA,KAAK,IAAII,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAAC,CAAvB,EAA0BA,CAAC,EAA3B,EAA8B;QAC5BJ,KAAK,CAACK,IAAN,CAAY,GAAGZ,IAAf;MACD;;MACD,OAAOO,KAAP;IACD,CARM;IASPM,cAAc,EAAC,CAACN,KAAD,EAAQO,MAAR,KAA0C;MACvD,IAAIC,OAAwB,GAAC,EAA7B;;MACA,KAAK,IAAIJ,CAAQ,GAAC,CAAlB,EAAqBA,CAAC,GAACG,MAAM,CAACE,OAA9B,EAAuCL,CAAC,EAAxC,EAA2C;QACzCI,OAAO,CAACH,IAAR,CAAc,GAAGZ,IAAjB;MACD;;MACD,OAAOe,OAAP;IACD,CAfM;IAgBPE,UAAU,EAAC,CAACV,KAAD,EAAQO,MAAR,KAA0C;MACnD,IAAIC,OAAO,GAAG,CAAC,GAAGR,KAAJ,CAAd;MACAQ,OAAO,CAACG,MAAR,CAAgBJ,MAAM,CAACE,OAAvB,EAAiC,CAAjC;MACA,OAAOD,OAAP;IACA,CApBK;IAqBPI,YAAY,EAAGZ,KAAF,IAAa;MACxB,IAAIQ,OAAwB,GAAC,EAA7B;MACAR,KAAK,GAAGQ,OAAR;MACA,OAAOR,KAAP;IACD;EAzBM;AAHyB,CAAD,CAAnC;AAiCA,OAAO,MAAM;EAAED,YAAF;EAAgBI,WAAhB;EAA6BO,UAA7B;EAAyCE;AAAzC,IAA0DjB,eAAe,CAACkB,OAAhF;AAEP,eAAelB,eAAe,CAACmB,OAA/B"},"metadata":{},"sourceType":"module"}